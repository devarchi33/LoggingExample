#최상위 rootLogger에 DEBUG 레벨로 설정한다. 
#그리고 appender 객체로서  console과 dailyLog 두개를 정의한다.
log4j.rootLogger = DEBUG, console, dailyLog 

#console appender 정의 시작
#console appender는 org.apache.log4j.ConsoleAppender를 사용하여 인스턴스화 한다.
log4j.appender.console = org.apache.log4j.ConsoleAppender
#console 객체의 레벨은 INFO 부터 시작한다.
log4j.appender.console.Threshold = INFO
#console appender 객체의 layout은 org.apache.log4j.PatternLayout 클래스를 사용하여 인스턴스화 한다.
log4j.appender.console.layout = org.apache.log4j.PatternLayout
#PatternLayout 객체의 패턴을 설정한다.
log4j.appender.console.layout.ConversionPattern=[%d{yyyy/MM/dd HH:mm:ss}] %5p %c %M : %m%n

#dailyLog appender 정의 시작
#dailyLog appender는 org.apache.log4j.DailyRollingFileAppender 사용하여 인스턴스화 한다.
log4j.appender.dailyLog = org.apache.log4j.DailyRollingFileAppender
#dailyLog 객체의 레벨은 DEBUG 부터 시작한다.
log4j.appender.dailyLog.Threshold = DEBUG
#dailyLog Appender 객체의 로그 파일의 위치는 다음과 같이 설정한다.
log4j.appender.dailyLog.File = c:/log/logfile.log 
#dailyLog appender 객체의 layout은 org.apache.log4j.PatternLayout 클래스를 사용하여 인스턴스화 한다.
log4j.appender.dailyLog.layout = org.apache.log4j.PatternLayout
#PatternLayout 객체의 패턴을 설정한다.
log4j.appender.dailyLog.layout.ConversionPattern=[%d{yyyy/MM/dd HH:mm:ss}] %5p %c %M : %m%n